name: service

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run Unit Tests
      run: |
        dotnet test --filter "Tests.Units" \
          --results-directory ./tests/reports/ \
          --logger "trx;LogFileName=unit-tests.trx"
          
    - name: Run Integration Tests
      run: |
        dotnet test --filter "Tests.Integrations" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:CoverletOutput=./reports/code-coverage.xml

    - name: Upload Unit Tests
      uses: actions/upload-artifact@v3
      with:
        name: unit-test-results
        path: ./tests/reports/unit-tests.trx

    - name: Upload Code Coverage
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-results
        path: ./tests/reports/code-coverage.xml

    - name: Install GitVersion
      run: |
        wget https://github.com/GitTools/GitVersion/releases/download/5.0.0/gitversion_5.0.0_amd64.deb
        sudo dpkg -i gitversion_5.0.0_amd64.deb

    - name: Generate Version
      id: version
      run: |
        gitversion /output json | jq -r '.SemVer' > version.txt
        echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

    - name: Login Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      env: Default

    - name: Build Docker Image
      run: docker build -t ${{ github.repository }}:${{ env.VERSION }} .

    - name: Push Docker Image
      run: docker push ${{ github.repository }}:${{ env.VERSION }}